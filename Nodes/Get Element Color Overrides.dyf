{
  "Uuid": "e0dc231a-7aaa-4278-a3ef-7540296b98c5",
  "IsCustomNode": true,
  "Category": "GeniusLoci.Graphics",
  "Description": "Retrieves the color of the element with several methods (view-specific, view filter and material overrides).",
  "Name": "Get Element Color Overrides",
  "ElementResolver": {
    "ResolutionMap": {
      "Revit.Application.Document.Current": {
        "Key": "Revit.Application.Document",
        "Value": "RevitNodes.dll"
      },
      "Revit.Application.Document": {
        "Key": "Revit.Application.Document",
        "Value": "RevitNodes.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "element",
        "TypeName": "var",
        "TypeRank": -1,
        "DefaultValue": null,
        "Description": ""
      },
      "Id": "806c2c7ce6514d458e6db7ae81afb30d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6b0f2a37bd464f40a35ecafd5fd198ab",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "Color",
      "Id": "1088d41a432846578be41835cea5b7f9",
      "Inputs": [
        {
          "Id": "57641ee1354a438d9594bea4c2577d8d",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "view",
        "TypeName": "var",
        "TypeRank": 0,
        "DefaultValue": "Revit.Application.Document.Current.ActiveView",
        "Description": ""
      },
      "Id": "e99fa0eb46764701950d83c5df8f9c99",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3481771bd6ae45afb7a359dfa4d3947f",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Based on a Lukas Mikkelsen's script\nimport clr\nclr.AddReference('DSCoreNodes')\nimport DSCore\nfrom DSCore import Color\n\n#Import ToDSType(bool) extension method\nclr.AddReference(\"RevitNodes\")\nimport Revit\nclr.ImportExtensions(Revit.Elements)\n\n# Import DocumentManager and TransactionManager\nclr.AddReference(\"RevitServices\")\nimport RevitServices\nfrom RevitServices.Persistence import DocumentManager\n\n# Import RevitAPI\nclr.AddReference(\"RevitAPI\")\nimport Autodesk\nfrom Autodesk.Revit.DB import *\n\ndoc = DocumentManager.Instance.CurrentDBDocument\nuiapp = DocumentManager.Instance.CurrentUIApplication\napp = uiapp.Application\nversion=int(app.VersionNumber)\n\nelements = UnwrapElement(IN[0]) if isinstance(IN[0],list) else [UnwrapElement(IN[0])]\nviews = UnwrapElement(IN[1])\noutput = []\n\t\nfor element in elements :\n\t#activeview = doc.ActiveView\n\toverride = views.GetElementOverrides(element.Id)\n\tif version < 2019 :\n\t\tprojectionColor = override.ProjectionFillColor\n\telse:\n\t\tprojectionColor = override.SurfaceForegroundPatternColor\n\tcolor = None\n\tif projectionColor.IsValid:\n\t\tcolor = DSCore.Color.ByARGB(255, projectionColor.Red, projectionColor.Green, projectionColor.Blue)\n\telse:\n\t\tfilters = views.GetFilters() # Get all the filter ids\n\t\tfor f in filters:\n\t\t\tfiltercats = [x for x in doc.GetElement(f).GetCategories()]\n\t\t\t# Check if element category corresponds to filter category\n\t\t\tif element.Category.Id in filtercats:\n\t\t\t \tfilterrules = doc.GetElement(f).GetRules()\n\t\t\t \trulepassed = []\n\t\t\t \t# Check if element passes all filter rules\n\t\t\t \tfor frule in filterrules:\n\t\t\t \t\trulepassed.append(frule.ElementPasses(element))\n\t\t\t \tif all(rulepassed):\n\t\t \t\t\toverride2 = views.GetFilterOverrides(f)\n\t\t\t\t\t# BEWARE: THIS PART ASSUMES THAT MULTIPLE FILTERS DOES NOT COLLIDE IN REGARDS TO COLOR DEFINITION OF THE ELEMENT\n\t\t \t\t\tif version < 2019 :\n\t\t\t\t\t\tprojectionColor2 = override2.ProjectionFillColor\n\t\t\t\t\telse:\n\t\t\t\t\t\tprojectionColor2 = override2.SurfaceForegroundPatternColor\n\t\t \t\t\tif override.ProjectionFillColor.IsValid:\n\t\t\t\t\t\tcolor = DSCore.Color.ByARGB(255, projectionColor2.Red, projectionColor2.Green, projectionColor2.Blue)\n\t\t\t \t\telse:\n\t\t\t \t\t\tpass\n\t\t\t \t# Otherwise element does not satisfy the filter\n\t\t\t \telse:\n\t\t\t \t\tpass\n\t\t\t# Otherwise the element category does not correspond to the filter category\n\t\t\telse:\n\t\t\t\tpass\n\t\t# Check if color has been previously defined.\n\t\t# If the color is retrieved based on material, our element may consist of multiple materials.\n\t\tif not color:\n\t\t\tcolor = []\n\t\t\tmats = [doc.GetElement(x) for x in element.GetMaterialIds(False)]\n\t\t\tfor mat in mats:\n\t\t\t\tcolor.append(DSCore.Color.ByARGB(255, mat.Color.Red, mat.Color.Green, mat.Color.Blue))\n\t\telse:\n\t\t\tpass\n\toutput.append(color)\n#Assign your output to the OUT variable\nif isinstance(IN[0], list): OUT = output\nelse: OUT = output[0]",
      "VariableInputPorts": true,
      "Id": "9edae239ff124e47a78650e471a16c57",
      "Inputs": [
        {
          "Id": "636f357a669847408273cb01807a9fa3",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "97789f5e2ef54b9685f6d9632a1733b8",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f01ec14c88334076b968b76949d0cf6b",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    }
  ],
  "Connectors": [
    {
      "Start": "6b0f2a37bd464f40a35ecafd5fd198ab",
      "End": "636f357a669847408273cb01807a9fa3",
      "Id": "ccf00171c5f04783b57e9664240a2914"
    },
    {
      "Start": "3481771bd6ae45afb7a359dfa4d3947f",
      "End": "97789f5e2ef54b9685f6d9632a1733b8",
      "Id": "605af05735f04a6a8ca3db679b269c3e"
    },
    {
      "Start": "f01ec14c88334076b968b76949d0cf6b",
      "End": "57641ee1354a438d9594bea4c2577d8d",
      "Id": "08ceeb072e0c43abb7d1ba2340eb60b3"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.3.0.5885",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "806c2c7ce6514d458e6db7ae81afb30d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 297.939755863902,
        "Y": 335.585888668641
      },
      {
        "ShowGeometry": true,
        "Name": "Output",
        "Id": "1088d41a432846578be41835cea5b7f9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 606.8,
        "Y": 372.8
      },
      {
        "ShowGeometry": true,
        "Name": "Input",
        "Id": "e99fa0eb46764701950d83c5df8f9c99",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -145.6,
        "Y": 412.8
      },
      {
        "ShowGeometry": true,
        "Name": "Get color override",
        "Id": "9edae239ff124e47a78650e471a16c57",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 435.2,
        "Y": 367.2
      }
    ],
    "Annotations": [],
    "X": 127.994688012253,
    "Y": 81.1637864325522,
    "Zoom": 0.538046297688571
  }
}