<Workspace Version="1.3.4.6666" X="82.5067334162392" Y="139.820036497752" zoom="0.395293464250516" ScaleFactor="1" Name="SelectByCategoryAndByLevel" Description="Select Elements by Category and Level.&#xD;&#xA;With linked documents, use the &quot;Collector of Levels&quot; node to obtain the linked level input." ID="69e069bb-d610-4fb8-b578-700d9b9ea643" Category="GeniusLoci.Select">
  <NamespaceResolutionMap />
  <Elements>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="48cafe86-5a00-4a6c-a01c-6921c269138d" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-176.952425740865" y="306.11034721294" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="//Collected level in active or linked document&#xD;&#xA;level:var" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="8d4d0025-ce81-47a0-9da8-079c7fe6957b" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="-176.952425740865" y="416.11034721294" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="category" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="30a497ae-5bb4-4a24-a427-aeee4000db57" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="565.447574259135" y="381.11034721294" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="Elements" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
    <PythonNodeModels.PythonNode guid="f3200156-908d-483f-bad8-f96a374e6c67" type="PythonNodeModels.PythonNode" nickname="SelectByCategory" x="341.047574259135" y="381.11034721294" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="2">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <Script>#Alban de Chasteigner 2019
#twitter : @geniusloci_bim
#geniusloci.bim@gmail.com
#https://github.com/albandechasteigner/GeniusLociForDynamo

import clr
clr.AddReference('RevitNodes')
import Revit
clr.ImportExtensions(Revit.Elements)

clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import FilteredElementCollector, Document, RevitLinkInstance, ElementMulticategoryFilter, ElementId, BuiltInCategory,BuiltInParameter, Level

from System.Collections.Generic import List

def tolist(obj1):
	if hasattr(obj1,"__iter__"): return obj1
	else: return [obj1]

SelectedLevel = tolist(UnwrapElement(IN[0]))[0]
cats = tolist(UnwrapElement(IN[1]))

doc = SelectedLevel.Document
elem = []

#ueWrapper by Dimitar Venkov
ueWrapper = None
wrappers = clr.GetClrType(Revit.Elements.ElementWrapper).GetMethods()
for w in wrappers:
	if w.ToString().startswith("Revit.Elements.UnknownElement"):
		ueWrapper = w
		break
		
catId = List[ElementId](c.Id for c in cats)
filter = ElementMulticategoryFilter(catId)
		
coll = FilteredElementCollector(doc).WhereElementIsNotElementType().WherePasses(filter)

#Inspired by Clockwork
def GetLevel(item):
	val = None
	if hasattr(item, "LevelId"): 
		val = item.Document.GetElement(item.LevelId)
		if val: return val
	if hasattr(item, "Level"):
		val = item.Level
		if val: return val
	if hasattr(item, "GenLevel"):
		val = item.GenLevel
		if val: return val
	if (item.GetType().ToString() in ("Autodesk.Revit.DB.Architecture.StairsRun", "Autodesk.Revit.DB.Architecture.StairsLanding")):
		item = item.GetStairs()
	if (item.GetType().ToString() == "Autodesk.Revit.DB.Architecture.Stairs") or item.Category.Id == ElementId(BuiltInCategory.OST_Ramps):
		try: return item.Document.GetElement(item.get_Parameter(BuiltInParameter.STAIRS_BASE_LEVEL_PARAM).AsElementId())
		except: pass
	if (item.GetType().ToString() == "Autodesk.Revit.DB.ExtrusionRoof"):
		try: return item.Document.GetElement(item.get_Parameter(BuiltInParameter.ROOF_CONSTRAINT_LEVEL_PARAM).AsElementId())
		except: pass
	if (item.GetType().ToString() == "Autodesk.Revit.DB.Mechanical.Duct" or "Autodesk.Revit.DB.Electrical.Conduit"):
		try: return item.Document.GetElement(item.get_Parameter(BuiltInParameter.RBS_START_LEVEL_PARAM).AsElementId())
		except: pass
	if hasattr(item, "OwnerViewId"):
		view = item.Document.GetElement(item.OwnerViewId)
		if hasattr(view, "GenLevel"):
			val = view.GenLevel
			if val: return val
	if not val:
		try: return item.Document.GetElement(item.get_Parameter(BuiltInParameter.INSTANCE_REFERENCE_LEVEL_PARAM).AsElementId())
		except: 
			try: return item.Document.GetElement(item.get_Parameter(BuiltInParameter.INSTANCE_SCHEDULE_ONLY_LEVEL_PARAM).AsElementId())
			except: 
				try: return item.Document.GetElement(item.get_Parameter(BuiltInParameter.SCHEDULE_LEVEL_PARAM).AsElementId())
				except:
					#if item is work plane based
					collector = FilteredElementCollector(item.Document).OfClass(Level).ToElements()
					try: return [level for level in collector if item.get_Parameter(BuiltInParameter.SKETCH_PLANE_PARAM).AsString().split(": ")[-1] == level.Name][0]
					except: return None

for col in coll :
	if GetLevel(col) and GetLevel(col).Id == SelectedLevel.Id:
		try:
			elem.append(col.ToDSType(True))
		except:
			if ueWrapper:
				elem.append(ueWrapper.Invoke(None,(col, True)))
			#elem.append(col.ToDSType(True))

OUT = elem
coll.Dispose()
filter.Dispose()</Script>
    </PythonNodeModels.PythonNode>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="48cafe86-5a00-4a6c-a01c-6921c269138d" start_index="0" end="f3200156-908d-483f-bad8-f96a374e6c67" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="8d4d0025-ce81-47a0-9da8-079c7fe6957b" start_index="0" end="f3200156-908d-483f-bad8-f96a374e6c67" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="f3200156-908d-483f-bad8-f96a374e6c67" start_index="0" end="30a497ae-5bb4-4a24-a427-aeee4000db57" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Aperçu en arrière-plan" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>